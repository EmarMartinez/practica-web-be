{
	"SECTION 1": "-----------------------------------------------------------------------------------------------------------------",
	"SEQUELIZE LOADER": "/loaders/sequelize.loader.js",
	"Connecting to {{dbName}} database": "Connecting to {{dbName}} database",
	"{{dbName}} connection has been established successfully": "{{dbName}} connection has been established successfully",
	"Creating models associations...": "Creating models associations...",
	"All models were successfully associated": "All models were successfully associated",
	"Syncing models with database...": "Syncing models with database...",
	"Models successfully synced": "Models successfully synced",
	"Tenant '{{tenantName}}' not found in DB. Skipping...": "Tenant '{{tenantName}}' not found in DB. Skipping...",
	"Creating in tenant '{{tenantName}}'": "Creating in tenant '{{tenantName}}'",
	"Updating in tenant '{{tenantName}}'": "Updating in tenant '{{tenantName}}'",
	"Tenants models successfully synced": "Tenants models successfully synced",
	"Error loading {{dbName}} database": "Error loading {{dbName}} database",
	"Closing {{dbName}} database connection": "Closing {{dbName}} database connection",
	"{{dbName}} database connection closed": "{{dbName}} database connection closed",
	"Data for '{{resourceName}}' successfully created": "Data for '{{resourceName}}' successfully created",
	"Associations for '{{resourceName}}' successfully created": "Associations for '{{resourceName}}' successfully created",
	"Schema {{schema}} created": "Schema {{schema}} created",
	"Schema {{schema}} dropped": "Schema {{schema}} dropped",
	"SECTION 2": "-----------------------------------------------------------------------------------------------------------------",
	"APP FACTORY": "/factories/app.factory.js",
	"Pipe": "Pipe",
	"Port": "Port",
	"{{bind}} requires elevated privileges": "{{bind}} requires elevated privileges",
	"{{bind}} is already in use": "{{bind}} is already in use",
	"Server listening on {{bind}}": "Server listening on {{bind}}",
	"SECTION 3": "-----------------------------------------------------------------------------------------------------------------",
	"JWT MIDDLEWARE": "/middlewares/jwt.middleware.js",
	"API JWT authentication is disabled": "API JWT authentication is disabled",
	"Endpoint {{path}} is whitelisted": "Endpoint {{path}} is whitelisted",
	"Skipping JWT validation": "Skipping JWT validation",
	"User {{username}} not found": "User {{username}} not found",
	"User validated:": "User validated:",
	"Token not provided": "Token not provided",
	"Tenant not provided": "Tenant not provided",
	"Invalid authorization type": "Invalid authorization type",
	"Invalid credentials": "Invalid credentials",
	"Invalid token": "Invalid token",
	"SECTION 4": "-----------------------------------------------------------------------------------------------------------------",
	"BASE CRUD CONTROLLER": "/shared/layers/base/base-crud.controller.js",
	"{entity} {id} not {GENDER, select, male {found} female {found} other {found}}": "{entity} {id} not {GENDER, select, male {found} female {found} other {found}}",
	"{entity} {id} already exists": "{entity} {id} already exists",
	"{entity} {id} was successfully {GENDER, select, male {created} female {created} other {created}}": "{entity} {id} was successfully {GENDER, select, male {created} female {created} other {created}}",
	"{entities} were successfully {GENDER, select, male {created} female {created} other {created}} in bulk": "{entities} were successfully {GENDER, select, male {created} female {created} other {created}} in bulk",
	"{entities} were successfully {GENDER, select, male {updated} female {updated} other {updated}} in bulk": "{entities} were successfully {GENDER, select, male {updated} female {updated} other {updated}} in bulk",
	"{entity} {id} was successfully {GENDER, select, male {updated} female {updated} other {updated}}": "{entity} {id} was successfully {GENDER, select, male {updated} female {updated} other {updated}}",
	"{entity} {id} was successfully {GENDER, select, male {deleted} female {deleted} other {deleted}}": "{entity} {id} was successfully {GENDER, select, male {deleted} female {deleted} other {deleted}}",
	"{entity} {id} was successfully {GENDER, select, male {authenticated} female {authenticated} other {authenticated}}": "{entity} {id} was successfully {GENDER, select, male {authenticated} female {authenticated} other {authenticated}}",
	"{entity} {id} was successfully {GENDER, select, male {validated} female {validated} other {validated}}": "{entity} {id} was successfully {GENDER, select, male {validated} female {validated} other {validated}}",
	"{GENDER, select, male {No} female {No} other {No}} {entity} matches query criteria": "{GENDER, select, male {No} female {No} other {No}} {entity} matches query criteria",
	"SECTION 5": "-----------------------------------------------------------------------------------------------------------------",
	"VALIDATIONS CONFIG": "/config/validations.config.js",
	"Field '{{field}}' cannot be null": "Field '{{field}}' cannot be null",
	"Field '{{field}}' must be an email": "Field '{{field}}' must be an email",
	"Field '{{field}}' must be an integer": "Field '{{field}}' must be an integer",
	"Field '{{field}}' must be a decimal number": "Field '{{field}}' must be a decimal number",
	"Field '{{field}}' must be a number": "Field '{{field}}' must be a number",
	"Field '{{field}}' must only contain letters without special characters": "Field '{{field}}' must only contain letters without special characters",
	"Field '{{field}}' must be a date": "Field '{{field}}' must be a date",
	"Field '{{field}}' must be boolean": "Field '{{field}}' must be boolean",
	"Field '{{field}}' must only contain letters": "Field '{{field}}' must only contain letters",
	"Field '{{field}}' must be one of these: {{args}}": "Field '{{field}}' must be one of these: {{args}}",
	"Field '{{field}}' must be lower than or equal to {{args}}": "Field '{{field}}' must be lower than or equal to {{args}}",
	"Field '{{field}}' must be greater than or equal to {{args}}": "Field '{{field}}' must be greater than or equal to {{args}}",
	"Field '{{field}}' must be UUIDV4": "Field '{{field}}' must be UUIDV4",
	"Field '{{field}}' must be UUIDV1": "Field '{{field}}' must be UUIDV1",
	"SECTION 6": "-----------------------------------------------------------------------------------------------------------------",
	"API RESOURCES": "/shared/layers/base/base-crud.controller.js",
	"User": "User",
	"Tenant": "Tenant"
}